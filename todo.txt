Deskripsi Singkat:

ðŸš¦ A high-performance, layer-7 HTTP reverse proxy and load balancer built with Go, designed for scalability and fault tolerance.

Rencana Kerja Proyek: "Helios" (todo.txt full)
Ini adalah roadmap lengkap untuk membangun Helios, dari penerus pesan sederhana hingga menjadi manajer lalu lintas yang cerdas.

FASE 1: THE CORE REVERSE PROXY (Target: Komit Pertama / Akhir Pekan)
(Tujuan: Membuat "pipa" dasar yang bisa meneruskan traffic dari satu titik ke titik lain.)

[âœ“] Milestone 1.1: Setup & Konfigurasi Sederhana

[âœ“] Inisialisasi proyek Go baru (go mod init).

[âœ“] Buat file helios.yaml yang berisi alamat port untuk Helios dan satu alamat backend server tujuan.

[âœ“] Implementasikan logika untuk membaca dan mem-parsing helios.yaml.

[âœ“] Milestone 1.2: Logika Reverse Proxy Inti

[âœ“] Buat server HTTP utama yang berjalan di port yang ditentukan.

[âœ“] Gunakan library net/http/httputil (khususnya NewSingleHostReverseProxy) untuk meneruskan semua permintaan yang masuk ke alamat backend tujuan.

[âœ“] Milestone 1.3: Pengujian End-to-End

[âœ“] Buat satu server backend "Hello World" palsu untuk menjadi target.

[âœ“] Jalankan Helios, dan pastikan saat lo akses alamat Helios, respons yang muncul adalah dari server backend palsu.

Definisi "Menang": "Pipa" berhasil menyalurkan data dari depan ke belakang.

FASE 2: THE LOAD BALANCER (Target: Minggu 1-2)
(Tujuan: Mengubah "pipa" menjadi "persimpangan cerdas" yang bisa membagi traffic.)

[âœ“] Milestone 2.1: Konfigurasi Multi-Backend

[âœ“] Ubah helios.yaml agar bisa menerima daftar alamat backend server.

[âœ“] Milestone 2.2: Implementasi Strategi Round Robin

[âœ“] Buat sebuah struct atau module untuk mengelola pool backend server.

[âœ“] Refaktor logika proxy. Sekarang, sebelum meneruskan permintaan, pilih satu server backend dari pool secara bergiliran (round robin).

[âœ“] Milestone 2.3: Pengujian Distribusi Beban

[âœ“] Jalankan beberapa server backend palsu, masing-masing dengan respons yang unik (misal: "Halo dari Server 1", "Halo dari Server 2").

[âœ“] Kirim beberapa permintaan ke Helios dan pastikan responsnya berubah-ubah, membuktikan bahwa load balancing berfungsi.

FASE 3: MAKING IT "PINTAR" (Target: Minggu 3-4)
(Tujuan: Memberi Helios kemampuan untuk mendeteksi "kesehatan" backend dan membuat keputusan yang lebih baik.)

[âœ“] Milestone 3.1: Passive Health Checks

[âœ“] Implementasikan logika di load balancer. Jika sebuah backend gagal merespons (misal: timeout atau error 5xx), tandai sebagai "tidak sehat" dan jangan kirimi traffic selama beberapa waktu (misal: 30 detik).

[âœ“] Milestone 3.2: Active Health Checks

[âœ“] Buat sebuah goroutine di latar belakang yang secara periodik (misal: setiap 10 detik) mengirim permintaan ke endpoint /health di setiap backend server.

[âœ“] Jika sebuah backend gagal dalam pengecekan kesehatan, hapus dari pool aktif. Jika sehat kembali, masukkan lagi.

[âœ“] Milestone 3.3: Strategi Load Balancing Baru

[âœ“] Implementasikan algoritma load balancing alternatif, misalnya Least Connections (kirim ke server dengan koneksi aktif paling sedikit).

FASE 4: OPEN SOURCE READINESS (Jangka Panjang)
(Tujuan: Memoles proyek agar siap dipamerkan dan dikontribusikan.)

[ ] Milestone 4.1: Dokumentasi & Pengujian

[ ] Tulis README.md yang komprehensif.

[ ] Buat unit test dan integration test untuk setiap strategi load balancing dan health check.

[ ] Miladece 4.2: CI/CD & Rilis

[ ] Buat workflow GitHub Actions untuk menjalankan tes secara otomatis.

[ ] Siapkan proses rilis untuk binary-nya.